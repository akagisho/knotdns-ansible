- name: get public key
  local_action: command cat tmp/{{ opsuser }}.pub
  sudo: no
  register: authorized_key

- name: set authorized_key
  authorized_key:
    user={{ opsuser }}
    key="{{ authorized_key.stdout }}"

- name: install depences
  apt: pkg={{ item }}
  with_items:
    - mysql-server
    - mysql-client
    - pdns-server
    - pdns-backend-mysql
    - ruby1.9.3
    - rubygems
    - libxml2-dev
    - libxslt-dev
    - libmysqlclient-dev
    - git
    - nginx

- name: copy PowerDNS config file
  template:
    src=etc/powerdns/pdns.conf.j2
    dest=/etc/powerdns/pdns.conf
    mode=0600

- name: disable DNSSEC
  lineinfile:
    dest=/etc/powerdns/pdns.d/pdns.local.gmysql
    regexp=^gmysql-dnssec=
    line=gmysql-dnssec=no

- name: reload PowerDNS
  service:
    name=pdns
    state=reloaded

- name: uninstall ruby1.8
  apt:
    pkg=ruby1.8
    state=absent

- name: install bundler
  shell: gem install bundler --no-ri --no-rdoc

- name: make www directory
  file:
    path={{ document_root }}
    state=directory
    owner=www-data
    group=www-data

- name: clone powerdns-on-rails
  git:
    repo=https://github.com/akagisho/powerdns-on-rails.git
    dest={{ document_root }}/powerdns-on-rails
    version=revised
  sudo_user: www-data

- name: put database config file
  copy:
    src=var/www/powerdns-on-rails/config/database.yml
    dest={{ document_root }}/powerdns-on-rails/config/database.yml
    owner=www-data
    group=www-data

- name: bundle install
  shell:
    bundle install --path vendor/bundle --without test development
    chdir={{ document_root }}/powerdns-on-rails
  sudo_user: www-data
  register: result
  changed_when: "'Installing' in result.stdout"

- name: rake db:migrate
  shell:
    bundle exec rake db:migrate RAILS_ENV=production
    chdir={{ document_root }}/powerdns-on-rails
  sudo_user: www-data
  register: result
  changed_when: result.stdout != ""

- name: rake assets:precompile
  shell:
    bundle exec rake assets:precompile RAILS_ENV=production
    chdir={{ document_root }}/powerdns-on-rails
  sudo_user: www-data
  register: result

- name: insert initial data
  shell:
    bundle exec rake db:seed RAILS_ENV=production
    chdir={{ document_root }}/powerdns-on-rails
  sudo_user: www-data

- name: generate secret token
  shell:
    bundle exec rake generate_secret_token
    chdir={{ document_root }}/powerdns-on-rails
  sudo_user: www-data

- name: make log directory
  file:
    path=/var/log/powerdns-on-rails
    state=directory

- name: put init script of unicorn
  template:
    src=etc/init.d/unicorn.j2
    dest=/etc/init.d/unicorn
    mode=0755

- name: update-rc.d unicorn
  shell:
    update-rc.d unicorn defaults 35
    creates=/etc/rc2.d/S35unicorn

- name: start unicorn
  service:
    name=unicorn
    state=restarted

- name: remove nginx default config file
  file:
    path=/etc/nginx/sites-enabled/default
    state=absent

- name: put nginx config file
  template:
    src=etc/nginx/conf.d/powerdns-on-rails.conf.j2
    dest=/etc/nginx/conf.d/powerdns-on-rails.conf

- name: restart nginx
  service:
    name=nginx
    state=restarted

- name: put master_zones.sh
  copy:
    src=home/dnsops/zone_sync/master_zones.sh
    dest=/home/{{ opsuser }}/zone_sync/master_zones.sh
    owner={{ opsuser }}
    mode=0755

- name: add master_zones.sh to cron
  cron:
    name=master_zones.sh
    user="{{ opsuser }}"
    job="setlock -n /tmp/master_zones.lock /home/{{ opsuser }}/zone_sync/master_zones.sh"
